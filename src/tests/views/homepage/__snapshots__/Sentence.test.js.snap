// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sentence component renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ForwardRef
    sentence={
      Object {
        "startTime": 0,
        "words": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div />,
        <div
          style={Object {}}
        >
          <WithStyles(Typography)
            align="center"
            color="primary"
          >
            00:00
          </WithStyles(Typography)>
          <WithStyles(Typography)
            align="center"
            paragraph={true}
          />
          <WithStyles(Divider)
            light={true}
            variant="middle"
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <WithStyles(Typography)
              align="center"
              color="primary"
            >
              00:00
            </WithStyles(Typography)>,
            <WithStyles(Typography)
              align="center"
              paragraph={true}
            />,
            <WithStyles(Divider)
              light={true}
              variant="middle"
            />,
          ],
          "onClick": undefined,
          "style": Object {},
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": "00:00",
              "color": "primary",
            },
            "ref": null,
            "rendered": "00:00",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": Array [],
              "paragraph": true,
            },
            "ref": null,
            "rendered": Array [],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "light": true,
              "variant": "middle",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div />,
          <div
            style={Object {}}
          >
            <WithStyles(Typography)
              align="center"
              color="primary"
            >
              00:00
            </WithStyles(Typography)>
            <WithStyles(Typography)
              align="center"
              paragraph={true}
            />
            <WithStyles(Divider)
              light={true}
              variant="middle"
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                align="center"
                color="primary"
              >
                00:00
              </WithStyles(Typography)>,
              <WithStyles(Typography)
                align="center"
                paragraph={true}
              />,
              <WithStyles(Divider)
                light={true}
                variant="middle"
              />,
            ],
            "onClick": undefined,
            "style": Object {},
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "align": "center",
                "children": "00:00",
                "color": "primary",
              },
              "ref": null,
              "rendered": "00:00",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "align": "center",
                "children": Array [],
                "paragraph": true,
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "light": true,
                "variant": "middle",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
