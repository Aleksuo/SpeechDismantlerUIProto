// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomePage component renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HomePage
    state={
      Object {
        "elapsed": 0,
        "interim": "",
        "isRecording": false,
        "left": false,
        "transcript": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Grid)
        alignItems="center"
        container={true}
        direction="column"
        justify="flex-end"
        spacing={24}
      >
        <WithStyles(Grid)
          item={true}
          xs={12}
        >
          <WithStyles(Fab)
            aria-label="mic"
            color="primary"
          >
            <pure(MicIcon) />
          </WithStyles(Fab)>
        </WithStyles(Grid)>
        <WithStyles(Grid)
          item={true}
          xs={12}
        >
          <Timer
            elapsed={0}
          />
        </WithStyles(Grid)>
        <WithStyles(Grid)
          item={true}
          md={3}
          style={
            Object {
              "height": "100%",
              "width": "100%",
            }
          }
          xs={6}
        >
          <Interim
            interim=""
          />
        </WithStyles(Grid)>
        <WithStyles(Grid)
          item={true}
          md={6}
          style={
            Object {
              "height": "100%",
              "width": "100%",
            }
          }
          xs={12}
        >
          <Transcript
            transcript={Array []}
          />
        </WithStyles(Grid)>
        <WithStyles(Grid)
          item={true}
          xs={12}
        >
          <WithStyles(Button)
            color="secondary"
            onClick={[Function]}
            variant="contained"
          >
            Reset
          </WithStyles(Button)>
        </WithStyles(Grid)>
      </WithStyles(Grid)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alignItems": "center",
        "children": Array [
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <WithStyles(Fab)
              aria-label="mic"
              color="primary"
            >
              <pure(MicIcon) />
            </WithStyles(Fab)>
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <Timer
              elapsed={0}
            />
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            md={3}
            style={
              Object {
                "height": "100%",
                "width": "100%",
              }
            }
            xs={6}
          >
            <Interim
              interim=""
            />
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            md={6}
            style={
              Object {
                "height": "100%",
                "width": "100%",
              }
            }
            xs={12}
          >
            <Transcript
              transcript={Array []}
            />
          </WithStyles(Grid)>,
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              variant="contained"
            >
              Reset
            </WithStyles(Button)>
          </WithStyles(Grid)>,
        ],
        "container": true,
        "direction": "column",
        "justify": "flex-end",
        "spacing": 24,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Fab)
              aria-label="mic"
              color="primary"
            >
              <pure(MicIcon) />
            </WithStyles(Fab)>,
            "item": true,
            "xs": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "aria-label": "mic",
              "children": <pure(MicIcon) />,
              "color": "primary",
              "onClick": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Timer
              elapsed={0}
            />,
            "item": true,
            "xs": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "elapsed": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Interim
              interim=""
            />,
            "item": true,
            "md": 3,
            "style": Object {
              "height": "100%",
              "width": "100%",
            },
            "xs": 6,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "interim": "",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Transcript
              transcript={Array []}
            />,
            "item": true,
            "md": 6,
            "style": Object {
              "height": "100%",
              "width": "100%",
            },
            "xs": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "blobUrl": undefined,
              "transcript": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              variant="contained"
            >
              Reset
            </WithStyles(Button)>,
            "item": true,
            "xs": 12,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Reset",
              "color": "secondary",
              "onClick": [Function],
              "variant": "contained",
            },
            "ref": null,
            "rendered": "Reset",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Grid)
          alignItems="center"
          container={true}
          direction="column"
          justify="flex-end"
          spacing={24}
        >
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <WithStyles(Fab)
              aria-label="mic"
              color="primary"
            >
              <pure(MicIcon) />
            </WithStyles(Fab)>
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <Timer
              elapsed={0}
            />
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            md={3}
            style={
              Object {
                "height": "100%",
                "width": "100%",
              }
            }
            xs={6}
          >
            <Interim
              interim=""
            />
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            md={6}
            style={
              Object {
                "height": "100%",
                "width": "100%",
              }
            }
            xs={12}
          >
            <Transcript
              transcript={Array []}
            />
          </WithStyles(Grid)>
          <WithStyles(Grid)
            item={true}
            xs={12}
          >
            <WithStyles(Button)
              color="secondary"
              onClick={[Function]}
              variant="contained"
            >
              Reset
            </WithStyles(Button)>
          </WithStyles(Grid)>
        </WithStyles(Grid)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "alignItems": "center",
          "children": Array [
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <WithStyles(Fab)
                aria-label="mic"
                color="primary"
              >
                <pure(MicIcon) />
              </WithStyles(Fab)>
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <Timer
                elapsed={0}
              />
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              md={3}
              style={
                Object {
                  "height": "100%",
                  "width": "100%",
                }
              }
              xs={6}
            >
              <Interim
                interim=""
              />
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              md={6}
              style={
                Object {
                  "height": "100%",
                  "width": "100%",
                }
              }
              xs={12}
            >
              <Transcript
                transcript={Array []}
              />
            </WithStyles(Grid)>,
            <WithStyles(Grid)
              item={true}
              xs={12}
            >
              <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                variant="contained"
              >
                Reset
              </WithStyles(Button)>
            </WithStyles(Grid)>,
          ],
          "container": true,
          "direction": "column",
          "justify": "flex-end",
          "spacing": 24,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Fab)
                aria-label="mic"
                color="primary"
              >
                <pure(MicIcon) />
              </WithStyles(Fab)>,
              "item": true,
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "aria-label": "mic",
                "children": <pure(MicIcon) />,
                "color": "primary",
                "onClick": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Timer
                elapsed={0}
              />,
              "item": true,
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "elapsed": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Interim
                interim=""
              />,
              "item": true,
              "md": 3,
              "style": Object {
                "height": "100%",
                "width": "100%",
              },
              "xs": 6,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "interim": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Transcript
                transcript={Array []}
              />,
              "item": true,
              "md": 6,
              "style": Object {
                "height": "100%",
                "width": "100%",
              },
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "blobUrl": undefined,
                "transcript": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                variant="contained"
              >
                Reset
              </WithStyles(Button)>,
              "item": true,
              "xs": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Reset",
                "color": "secondary",
                "onClick": [Function],
                "variant": "contained",
              },
              "ref": null,
              "rendered": "Reset",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
