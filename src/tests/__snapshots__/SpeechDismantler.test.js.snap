// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SpeechDismantler component renders 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SpeechDismantler
    server_address="..."
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div>
          <Hidden
            implementation="js"
            lgDown={false}
            lgUp={false}
            mdDown={false}
            mdUp={false}
            smDown={true}
            smUp={false}
            xlDown={false}
            xlUp={false}
            xsDown={false}
            xsUp={false}
          >
            <WithStyles(MiniDrawer)
              setView={[Function]}
            />
          </Hidden>
          <Hidden
            implementation="js"
            lgDown={false}
            lgUp={false}
            mdDown={false}
            mdUp={true}
            smDown={false}
            smUp={false}
            xlDown={false}
            xlUp={false}
            xsDown={false}
            xsUp={false}
          >
            <MobileDrawer
              setView={[Function]}
            />
          </Hidden>
        </div>,
        <div>
          <HomePage
            reset={[Function]}
            state={
              Object {
                "elapsed": 0,
                "interim": "",
                "isRecording": false,
                "left": false,
                "transcript": Array [],
                "view": 0,
                "volumes": Array [],
              }
            }
            toggleRecord={[Function]}
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Hidden
              implementation="js"
              lgDown={false}
              lgUp={false}
              mdDown={false}
              mdUp={false}
              smDown={true}
              smUp={false}
              xlDown={false}
              xlUp={false}
              xsDown={false}
              xsUp={false}
            >
              <WithStyles(MiniDrawer)
                setView={[Function]}
              />
            </Hidden>,
            <Hidden
              implementation="js"
              lgDown={false}
              lgUp={false}
              mdDown={false}
              mdUp={true}
              smDown={false}
              smUp={false}
              xlDown={false}
              xlUp={false}
              xsDown={false}
              xsUp={false}
            >
              <MobileDrawer
                setView={[Function]}
              />
            </Hidden>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <WithStyles(MiniDrawer)
                setView={[Function]}
              />,
              "implementation": "js",
              "lgDown": false,
              "lgUp": false,
              "mdDown": false,
              "mdUp": false,
              "smDown": true,
              "smUp": false,
              "xlDown": false,
              "xlUp": false,
              "xsDown": false,
              "xsUp": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "setView": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <MobileDrawer
                setView={[Function]}
              />,
              "implementation": "js",
              "lgDown": false,
              "lgUp": false,
              "mdDown": false,
              "mdUp": true,
              "smDown": false,
              "smUp": false,
              "xlDown": false,
              "xlUp": false,
              "xsDown": false,
              "xsUp": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "setView": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <HomePage
            reset={[Function]}
            state={
              Object {
                "elapsed": 0,
                "interim": "",
                "isRecording": false,
                "left": false,
                "transcript": Array [],
                "view": 0,
                "volumes": Array [],
              }
            }
            toggleRecord={[Function]}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "reset": [Function],
            "state": Object {
              "elapsed": 0,
              "interim": "",
              "isRecording": false,
              "left": false,
              "transcript": Array [],
              "view": 0,
              "volumes": Array [],
            },
            "toggleRecord": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div>
            <Hidden
              implementation="js"
              lgDown={false}
              lgUp={false}
              mdDown={false}
              mdUp={false}
              smDown={true}
              smUp={false}
              xlDown={false}
              xlUp={false}
              xsDown={false}
              xsUp={false}
            >
              <WithStyles(MiniDrawer)
                setView={[Function]}
              />
            </Hidden>
            <Hidden
              implementation="js"
              lgDown={false}
              lgUp={false}
              mdDown={false}
              mdUp={true}
              smDown={false}
              smUp={false}
              xlDown={false}
              xlUp={false}
              xsDown={false}
              xsUp={false}
            >
              <MobileDrawer
                setView={[Function]}
              />
            </Hidden>
          </div>,
          <div>
            <HomePage
              reset={[Function]}
              state={
                Object {
                  "elapsed": 0,
                  "interim": "",
                  "isRecording": false,
                  "left": false,
                  "transcript": Array [],
                  "view": 0,
                  "volumes": Array [],
                }
              }
              toggleRecord={[Function]}
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Hidden
                implementation="js"
                lgDown={false}
                lgUp={false}
                mdDown={false}
                mdUp={false}
                smDown={true}
                smUp={false}
                xlDown={false}
                xlUp={false}
                xsDown={false}
                xsUp={false}
              >
                <WithStyles(MiniDrawer)
                  setView={[Function]}
                />
              </Hidden>,
              <Hidden
                implementation="js"
                lgDown={false}
                lgUp={false}
                mdDown={false}
                mdUp={true}
                smDown={false}
                smUp={false}
                xlDown={false}
                xlUp={false}
                xsDown={false}
                xsUp={false}
              >
                <MobileDrawer
                  setView={[Function]}
                />
              </Hidden>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <WithStyles(MiniDrawer)
                  setView={[Function]}
                />,
                "implementation": "js",
                "lgDown": false,
                "lgUp": false,
                "mdDown": false,
                "mdUp": false,
                "smDown": true,
                "smUp": false,
                "xlDown": false,
                "xlUp": false,
                "xsDown": false,
                "xsUp": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "setView": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <MobileDrawer
                  setView={[Function]}
                />,
                "implementation": "js",
                "lgDown": false,
                "lgUp": false,
                "mdDown": false,
                "mdUp": true,
                "smDown": false,
                "smUp": false,
                "xlDown": false,
                "xlUp": false,
                "xsDown": false,
                "xsUp": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "setView": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <HomePage
              reset={[Function]}
              state={
                Object {
                  "elapsed": 0,
                  "interim": "",
                  "isRecording": false,
                  "left": false,
                  "transcript": Array [],
                  "view": 0,
                  "volumes": Array [],
                }
              }
              toggleRecord={[Function]}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "reset": [Function],
              "state": Object {
                "elapsed": 0,
                "interim": "",
                "isRecording": false,
                "left": false,
                "transcript": Array [],
                "view": 0,
                "volumes": Array [],
              },
              "toggleRecord": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
