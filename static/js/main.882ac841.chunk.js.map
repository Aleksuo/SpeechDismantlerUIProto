{"version":3,"sources":["common/NavigationList.js","common/MiniDrawer.js","common/MobileDrawer.js","views/homepage/Interim.js","utils/GeneralUtils.js","views/homepage/Sentence.js","views/homepage/Transcript.js","views/homepage/Timer.js","views/homepage/HomePage.js","views/analysepage/AnalysePage.js","utils/WordFregs.js","SpeechDismantler.js","utils/AudioUtils.js","utils/FillerWords.js","utils/WordColor.js","utils/DownsampleBuffer.js","index.js"],"names":["NavigationList","_ref","setView","react_default","a","createElement","List_default","ListItem_default","button","key","onClick","ListItemIcon_default","Home_default","ListItemText_default","primary","BarChart_default","Build_default","Info_default","MiniDrawer","state","open","handleDrawerOpen","_this","setState","handleDrawerClose","_classNames","_classNames2","_this$props","this","props","classes","className","root","CssBaseline_default","Drawer_default","variant","classNames","drawer","Object","defineProperty","drawerOpen","drawerClose","paper","toolbar","IconButton_default","ChevronLeft_default","ChevronRight_default","Divider_default","common_NavigationList","React","Component","withStyles","theme","display","appBar","zIndex","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","concat","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","background","& *","color","overflowX","spacing","unit","breakpoints","up","objectSpread","alignItems","justifyContent","padding","mixins","content","flexGrow","withTheme","MobileDrawer","left","toggleDrawer","side","sideListSwipeable","index_es","onClose","onOpen","tabIndex","role","onKeyDown","Interim","interim","elevation","style","height","textAlign","overflow","millisecondsToTimeString","milliseconds","elapsedSec","Math","round","min","floor","sec","toString","secondsToMilliseconds","seconds","nanosecondsToMilliseconds","nanos","estimateStartTime","sentence","epsilon","endTime","words","firstWord","lastWord","length","firstTime","startTime","end","parseInt","Sentence","forwardRef","ref","isCurrent","wordColor","isRecording","borderColor","borderStyle","items","map","word","idx","wordWithElapsedTime","sentenceStartTime","GetColor","refElement","align","paragraph","light","Transcript","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","audio","current","paused","scrollToBottom","scrollToCurrentPlayback","transcriptEnd","scrollIntoView","currentlyPlaying","behavior","onSentenceClick","time","currentTime","play","render","transcript","blobUrl","cur","currentPlayback","arr","next","Number","MAX_VALUE","homepage_Sentence","isPlaying","maxHeight","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","marginTop","src","controls","type","createRef","_this2","ontimeupdate","onloadedmetadata","random","onplaying","onpaused","Timer","elapsed","margin","lightTooltip","backgroundColor","palette","common","white","boxShadow","shadows","fontSize","lightIndicator","toggleRecord","reset","setHighLight","container","direction","justify","item","xs","title","tooltip","aria-label","Pause_default","Mic_default","homepage_Timer","md","homepage_Interim","position","value","highlight","indicator","label","homepage_Transcript","window","confirm","AnalysePage","victory_pie","innerRadius","colorScale","data","b","colors","reverse","AudioContext","context","processor","input","globalStream","analyser","recorder","RemovePunctuation","string","replace","RemovePunctToLowerCase","toLowerCase","CheckIfInMap","stringNoPunctLoCase","has","GetIndexInTopWords","array","stringListForm","undefined","i","WordCounter","wordInformation","index","topWords","IsInMostUsedList","GetFrequency","freq","wordMapForm","wordsAndFreqs","get","CalculateFrequencies","tra","Map","j","st","stNoPunct","freg","set","CountOccurences","iterator","keys","entries","size","sort","SortMap","newArrSize","newFirstIndex","lastElements","slice","LimitToXGreatest","convertVolumeToColor","volume","GetBestMatchingVolume","number","findInSubArray","startIndex","endIndex","middleIndex","AudioUtils","wordWithSentenceStartTime","sentenceStartTimeMs","wordTime","wordTimesAndVolumes","bestVolumeMatch","averageVolumes","SetVolumes","newVolume","timeAndVolume","startVolume","volumeCounter","startTimeNotSet","audioSampleSize","push","FillerWords","fillerWords","fillers","fillerWordsJson","fillerWord","WordColor","useFillerWords","useVolumeLevel","useWordFrequencies","ColorUsingFillerWords","ColorUsingWordFrequencies","ColorUsingVolumeLevel","ResetColor","newVolumes","DownsampleBuffer","buffer","sampleRate","outSampleRate","sampleRateRatio","newLength","result","Int16Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","initialState","volumes","audioChunks","view","SpeechDismantler","tick","newElapsed","stopRecording","clearInterval","timer","id","newIsRecording","setInterval","handleListen","resume","pause","suspend","streamAudioData","e","inputBuffer","getChannelData","left16","socket","emit","webkitAudioContext","createScriptProcessor","bufferSize","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","createMediaStreamSource","connect","createAnalyser","smoothingTimeConstant","fftSize","destination","ondataavailable","newChunks","audioBlob","Blob","audioUrl","URL","createObjectURL","onpause","requestData","onaudioprocess","Uint8Array","frequencyBinCount","getByteFrequencyData","values","average","volumesObject","start","tracks","getTracks","stop","disconnect","close","server_address","openSocket","on","final","results","isFinal","alternatives","newTranscript","onbeforeunload","page","homepage_HomePage","analysepage_AnalysePage","smDown","common_MiniDrawer","mdUp","common_MobileDrawer","location","hostname","ReactDOM","src_SpeechDismantler","document","getElementById"],"mappings":"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","file":"static/js/main.882ac841.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport InfoIcon from '@material-ui/icons/Info'\nimport HomeIcon from '@material-ui/icons/Home'\nimport BarChartIcon from '@material-ui/icons/BarChart'\nimport BuildIcon from '@material-ui/icons/Build'\n    \nconst NavigationList = ({ setView }) => {\n        return (\n          <List>\n                <ListItem button key={'Home'} onClick={() => {return setView(0)}}>\n                  <ListItemIcon><HomeIcon onClick={() => {return setView(0)}}/></ListItemIcon>\n                  <ListItemIcon></ListItemIcon>\n                  <ListItemText primary={'Home'}/>\n                </ListItem>\n                <ListItem button key={'Statistics'} onClick={() => {return setView(1)}}>\n                  <ListItemIcon><BarChartIcon onClick={() => {return setView(1)}}/></ListItemIcon>\n                  <ListItemIcon></ListItemIcon>\n                  <ListItemText primary={'Statistics'}/>\n                </ListItem>\n                <ListItem button key={'Settings'} onClick={() => {return setView(2)}}>\n                  <ListItemIcon><BuildIcon onClick={() => {return setView(2)}}/></ListItemIcon>\n                  <ListItemIcon></ListItemIcon>\n                  <ListItemText primary={'Settings'}/>\n                </ListItem>\n                <ListItem button key={'About'} onClick={() => {return setView(3)}}>\n                  <ListItemIcon><InfoIcon onClick={() => {return setView(3)}}/></ListItemIcon>\n                  <ListItemIcon></ListItemIcon>\n                  <ListItemText primary={'About'}/>\n                </ListItem>\n              </List>\n\n          )\n}\n\nNavigationList.propTypes = {\n\tsetView: PropTypes.func\n}\n\nexport default NavigationList","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { withStyles } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport NavigationList from './NavigationList'\n\n\nconst drawerWidth = 240\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  paper: {\n    background: \"#2196f3\",\n    '& *': { color: 'rgba(255, 255, 255, 1)' },\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing.unit * 7 + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing.unit * 9 + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing.unit * 3,\n  },\n})\n\nclass MiniDrawer extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleDrawerOpen = () => {\n    this.setState({ open: true })\n  };\n\n  handleDrawerClose = () => {\n    this.setState({ open: false })\n  };\n\n  render() {\n    const { classes, setView/* , theme */} = this.props\n\n    return (\n      <div className={classes.root}>\n        <CssBaseline />\n        \n        \n        \n        <Drawer\n          variant=\"permanent\"\n          className={classNames(classes.drawer, {\n            [classes.drawerOpen]: this.state.open,\n            [classes.drawerClose]: !this.state.open,\n          })}\n          classes={{\n            paper: classNames({\n              [classes.drawerOpen]: this.state.open,\n              [classes.drawerClose]: !this.state.open,\n              [classes.paper]: classes.paper\n            }),\n          }}\n          open={this.state.open}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={this.state.open ? this.handleDrawerClose : this.handleDrawerOpen}>\n              {this.state.open ?  <ChevronLeftIcon/> : <ChevronRightIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n            <NavigationList setView={setView}/>\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nMiniDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  setView: PropTypes.func\n}\n\nexport default withStyles(styles, { withTheme: true })(MiniDrawer)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {SwipeableDrawer} from '@material-ui/core'\nimport NavigationList from './NavigationList'\n\nclass MobileDrawer extends React.Component {\n    state = {\n        left: false,\n    };\n\n    toggleDrawer = (side, open) => () => {\n        this.setState({\n            [side]: open,\n        })\n    }\n\n    render() {\n        const {setView} = this.props\n        const sideListSwipeable = (\n            <div>\n                <NavigationList setView = {setView}/>\n            </div>\n        )\n        return (\n            <div>\n                {/*\n\t\t\t\t<div>\n\t\t\t\t\t<Grid container\n\t\t\t\t\t\tspacing={24}\n\t\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\t\talignItems=\"left\"\n\t\t\t\t\t\tjustify=\"space-evenly\">\n\t\t\t\t\t\t<Hidden ndUp>\n\t\t\t\t\t\t\t<Grid item xs={12} md={12}>\n\t\t\t\t\t\t\t\t<Button onClick={this.toggleDrawer('left', true)}>OPEN SWIPE</Button>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Hidden>\n\t\t\t\t\t</Grid>\n\t\t\t\t</div>\n\t\t\t\t*/}\n                <SwipeableDrawer\n                    open={this.state.left}\n                    onClose={this.toggleDrawer('left', false)}\n                    onOpen={this.toggleDrawer('left', true)}\n                >\n                    <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={this.toggleDrawer('left', false)}\n                        onKeyDown={this.toggleDrawer('left', false)}\n                    >\n                        {sideListSwipeable}\n                    </div>\n                </SwipeableDrawer>\n            </div>\n\n        )\n    }\n}\n\nMobileDrawer.propTypes = {\n\tsetView: PropTypes.func\n}\n\nexport default MobileDrawer","import React from 'react'\nimport {Paper, Typography} from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\n/**\n * A Stateless component that is used for displaying the interim speech recognition results\n * @author Aleksi Suoranta \n * @param {string} interim\n */\nconst Interim = ({ interim }) => {\n    return (\n        <div>\n            <Paper elevation={2} style={{ color: \"gray\", height: \"5vh\", textAlign: 'center', overflow: \"auto\" }}>\n                <Typography color=\"inherit\">{interim}</Typography>\n            </Paper>\n        </div>\n    )\n}\n\nInterim.propTypes = {\n    interim: PropTypes.string\n}\n\nexport default Interim","/**\n * Transforms milliseconds to string in mm:ss format\n * @param {number} milliseconds \n * @author Aleksi Suoranta\n */\nexport const millisecondsToTimeString = (milliseconds) =>{\n    const elapsedSec = Math.round(milliseconds/1000)\n    const min = Math.floor(elapsedSec/60)\n    const sec = Math.floor(elapsedSec-(min*60))\n    const min_s = min<10 ? \"0\"+min.toString() : min.toString()\n    const sec_s = sec<10 ? \"0\"+sec.toString() : sec.toString()\n    return min_s+\":\"+sec_s\n}\n\n/**\n * Transfroms seconds to milliseconds\n * @param {number} seconds\n * @author Aleksi Suoranta\n */\nexport const secondsToMilliseconds = (seconds) => {\n    return seconds*1000\n}\n\n/**\n * Transforms nanoseconds to milliseconds\n * @param {number} nanos \n * @author Aleksi Suoranta\n */\nexport const nanosecondsToMilliseconds = (nanos) => {\n    return nanos/1000000\n}\n\n/**\n * Estimates the start time of a sentence using the timestamps from the google api and a delay estimation epsilon\n * @param {object} sentence \n * @param {number} epsilon \n */\nexport const estimateStartTime = (sentence, epsilon) =>{\n    const endTime = sentence.endTime\n    const words = sentence.words\n    const firstWord = words[0]\n    const lastWord = words[words.length - 1]\n    const firstTime = secondsToMilliseconds(firstWord.startTime.seconds) + nanosecondsToMilliseconds(firstWord.startTime.nanos)\n    const lastTime = secondsToMilliseconds(parseInt(lastWord.endTime.seconds)) + nanosecondsToMilliseconds(lastWord.endTime.nanos)\n    const duration = lastTime-firstTime + epsilon\n    var end = endTime - duration\n    end = end > 0 ? end : 0\n    return end\n}","import React from 'react'\nimport { Typography, Divider } from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\nimport { millisecondsToTimeString } from './../../utils/GeneralUtils.js'\n//import { parentPort } from 'worker_threads'\n\n/**\n * A stateless component for displaying the recognized sentences in the transcript\n * @param {*} props\n * @param {} ref\n * @author Aleksi Suoranta\n */\nconst Sentence = React.forwardRef((props, ref) => {\n    const { sentence, onClick, isCurrent, wordColor, isRecording } = props\n    const startTime = sentence.startTime\n    var style = (isCurrent && !isRecording) ? { borderColor: \"#2196f3\", borderStyle: \"solid\",} : {}\n    \n    \n    const items = sentence.words.map((word, idx) => {\n\n        var wordWithElapsedTime = {\n            word: word.word,\n            startTime: word.startTime,\n            endTime: word.endTime,\n            sentenceStartTime: startTime\n        }\n\n        var color = wordColor.GetColor(wordWithElapsedTime)\n        return <span key={idx} style={{ color: color }}>{word.word} </span>\n    })\n    const refElement = isCurrent ? <div ref={ref}></div> : <div></div>\n    return (\n        <div>\n            {refElement}\n            <div onClick={!isRecording ? onClick : ()=>{} } style={style}>\n                <Typography align=\"center\" color=\"primary\">{millisecondsToTimeString(sentence.startTime)}</Typography>\n                <Typography paragraph={true} align=\"center\">{items}</Typography>\n                <Divider variant=\"middle\" light={true} />\n            </div>\n        </div>)\n})\n\nSentence.propTypes = {\n    sentence: PropTypes.object,\n    onClick: PropTypes.func,\n    isCurrent: PropTypes.bool,\n    wordColor: PropTypes.object,\n    isRecording: PropTypes.bool,\n}\n\nexport default Sentence","import React, { Component } from 'react'\nimport { Paper } from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\n\nimport Sentence from './Sentence'\n\n/**\n * A component that displays the transcript elements\n * @author Aleksi Suoranta\n */\nclass Transcript extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentPlayback: 0,\n            isPlaying: false\n        }\n        this.audio = React.createRef()\n        //scroll to these references\n        this.transcriptEnd = React.createRef()\n        this.currentlyPlaying = React.createRef()\n    }\n\n    /**\n     * Binds event handlers to the html audio element here\n     * @this {Transcript}\n     * @author Aleksi Suoranta\n     */\n    componentDidMount() {\n        this.audio.current.ontimeupdate = () => {\n            this.setState({ currentPlayback: this.audio.current.currentTime })\n        }\n\n        this.audio.current.onloadedmetadata = () => {\n            //A hack for a chrome bug: https://stackoverflow.com/questions/38443084/how-can-i-add-predefined-length-to-audio-recorded-from-mediarecorder-in-chrome/39971175\n            this.audio.current.currentTime = 10000000 * Math.random()\n        }\n\n        this.audio.current.onplaying = () => {\n            this.setState({ isPlaying: true })\n        }\n\n        this.audio.current.onpaused = () => {\n            this.setState({ isPlaying: false })\n        }\n    }\n\n    /**\n     * Scroll the transcript on updates when needed\n     * @this {Transcript}\n     * @author Aleksi Suoranta\n     */\n    componentDidUpdate = () => {\n        if (!this.audio.current.paused) {\n            this.scrollToCurrentPlayback()\n        } else if(this.props.isRecording) {\n            this.scrollToBottom()\n        }\n    }\n\n    /**\n     * Scrolls to the end of the transcript marked by reference div\n     * @this {Transcript}\n     * @author Aleksi Suoranta\n     */\n    scrollToBottom = () => {\n        this.transcriptEnd.current.scrollIntoView()\n    }\n\n    /**\n     * Scrolls to the sentence that is currently played, marked by reference div.\n     * @this {Transcript}\n     * @author Aleksi Suoranta\n     */\n    scrollToCurrentPlayback = () => {\n        if(this.currentlyPlaying.current){\n            this.currentlyPlaying.current.scrollIntoView({ behavior: 'smooth' })\n        }\n    }\n\n    /**\n     * Event handler for clicking sentences, starts playback on click.\n     * @this {Transcript}\n     * @author Aleksi Suoranta\n     * @param {number} time\n     */\n    onSentenceClick = (time) => {\n        this.audio.current.currentTime = (time) / 1000\n        this.audio.current.play()\n    }\n\n    render = () => {\n        const { transcript, blobUrl, wordColor, isRecording} = this.props\n        const cur = this.state.currentPlayback * 1000\n        const items = transcript.map((sentence, idx, arr) => {\n            const next = arr[idx+1] ? arr[idx+1].startTime-1 : Number.MAX_VALUE\n            return (\n                <Sentence\n                    wordColor={wordColor}\n                    key={idx}\n                    isCurrent={(sentence.startTime < cur) && (next > cur) && this.state.isPlaying}\n                    sentence={sentence}\n                    onClick={() => this.onSentenceClick(sentence.startTime)}\n                    ref={this.currentlyPlaying}\n                    isRecording={isRecording}\n                />)\n        })\n\n        return (\n\n            <div>\n                <Paper elevation={1} style={{ maxHeight: \"35vh\", height: \"40vh\", overflow: \"auto\" }}>\n                    <CSSTransitionGroup\n                        transitionName=\"example\"\n                        transitionEnterTimeout={500}\n                        transitionLeaveTimeout={300}>\n                        <div>\n                            <span>{items}</span>\n                            <div ref={this.transcriptEnd} />\n                        </div>\n\n                    </CSSTransitionGroup>\n                </Paper>\n\n\n                <div style={{ marginTop: \"7px\" }}>\n                    <audio ref={this.audio} src={blobUrl} controls type=\"audio/ogg\" style={{ width: \"100%\" }}></audio>\n                </div>\n            </div>\n        )\n\n    }\n\n}\n\n\nTranscript.propTypes = {\n    transcript: PropTypes.array,\n    blobUrl: PropTypes.string,\n    isRecording: PropTypes.bool,\n    wordColor: PropTypes.object\n}\n\nexport default Transcript","import React from 'react'\nimport { Typography} from '@material-ui/core'\nimport PropTypes from 'prop-types'\n\n\nimport { millisecondsToTimeString } from '../../utils/GeneralUtils.js'\n\n/**\n * A stateless component used for displaying the elapsed time.\n * @author Aleksi Suoranta\n * @param {number} elapsed\n */\nconst Timer = ({ elapsed }) => {\n    const time = millisecondsToTimeString(elapsed)\n    return (\n        <div>\n            <Typography color=\"primary\">{time}</Typography>\n        </div>\n    )\n}\n\nTimer.propTypes = {\n    elapsed: PropTypes.number\n}\n\nexport default Timer","import React from 'react'\nimport { Button, Grid, Fab, AppBar, Tabs, Tab, Tooltip } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\nimport MicIcon from '@material-ui/icons/Mic'\nimport PauseIcon from '@material-ui/icons/Pause'\nimport PropTypes from 'prop-types'\n\nimport Interim from './Interim'\nimport Transcript from './Transcript'\nimport Timer from './Timer'\n\nconst styles = theme => ({\n    button: {\n        margin: theme.spacing.unit,\n    },\n    lightTooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n    },\n    lightIndicator:{\n        height: \"4px\",\n        color: 'rgba(0, 0, 0, 0.87)'\n    },\n})\n\n/**\n * A stateless component that contains they layout of the home page\n * @author Aleksi Suoranta\n * @param {*} props \n */\nconst HomePage = (props) => {\n    const { state, toggleRecord, reset, setHighLight, classes } = props\n    return (\n        <div>\n            <Grid container\n                spacing={16}\n                direction=\"column\"\n                alignItems=\"center\"\n                justify=\"flex-end\"\n            >\n                <Grid item xs={12}>\n                <Tooltip title=\"Start/stop recording\" classes={{ tooltip: classes.lightTooltip }}>\n                    <Fab aria-label=\"mic\" color={state.isRecording ? 'secondary' : 'primary'} onClick={toggleRecord}>\n                        {state.isRecording ? <PauseIcon /> : <MicIcon />}\n                    </Fab>\n                </Tooltip>\n                </Grid>\n                <Grid item xs={12}>\n                    <Timer elapsed={state.elapsed} />\n                </Grid>\n                <Grid item xs={6} md={3} style={{ width: \"100%\", height: \"100%\" }}>\n                    <Interim interim={state.interim} />\n                </Grid>\n                <Grid item xs={12} md={6} style={{ width: \"100%\" }}>\n\n                </Grid>\n                <Grid item xs={12} md={6} style={{ width: \"100%\", height: \"100%\" }}>\n                    <AppBar position=\"static\" color=\"primary\" elevation={1} style={{ background: \"#2196f3\" }}>\n\n                        <Tabs\n                            variant=\"fullWidth\"\n                            value={state.highlight}\n                            classes={{ indicator: classes.lightIndicator}}\n                        >\n                            <Tab style={{ display: \"none\" }}></Tab>\n                            <Tooltip title=\"Highlight filler words\" classes={{ tooltip: classes.lightTooltip }}>\n                                <Tab onClick={() => { setHighLight(1) }} label=\"Fillers\"></Tab>\n                            </Tooltip>\n                            <Tooltip title=\"Highlight commonly used words\" classes={{ tooltip: classes.lightTooltip }}>\n                                <Tab onClick={() => { setHighLight(2) }} label=\"Frequencies\"></Tab>\n                            </Tooltip>\n                            <Tooltip title=\"Highlight volume levels\" classes={{ tooltip: classes.lightTooltip }}>\n                                <Tab onClick={() => { setHighLight(3) }} label=\"Volumes\"></Tab>\n                            </Tooltip>\n\n                        </Tabs>\n\n\n                    </AppBar>\n\n                    <Transcript transcript={state.transcript} blobUrl={state.blobUrl} wordColor={state.wordColor} isRecording={state.isRecording} />\n                </Grid>\n                <Grid item xs={12}>\n                    <Tooltip title=\"Reset the app\" classes={{ tooltip: classes.lightTooltip }}>\n                        <Button variant=\"contained\" color=\"secondary\" onClick={() => { if (window.confirm(\"Are you sure you want to reset the app?\")) { reset() } }}>Reset</Button>\n                    </Tooltip>\n                </Grid>\n            </Grid>\n        </div>)\n}\n\nHomePage.propTypes = {\n    state: PropTypes.object,\n    toggleRecord: PropTypes.func,\n    reset: PropTypes.func,\n    setHighLight: PropTypes.func,\n    classes: PropTypes.object\n}\nexport default withStyles(styles, { withTheme: true })(HomePage)","import React from 'react'\nimport {Grid} from '@material-ui/core'\nimport PropTypes from 'prop-types'\nimport { VictoryPie} from 'victory'\n//import { WordCounter } from '../../utils/WordFregs.js'\n\n/*\nconst otherSample = [\n        {quarter: 1, earnings: 13000},\n        {quarter: 2, earnings: 16500},\n        {quarter: 3, earnings: 14250},\n        {quarter: 4, earnings: 19000}\n      ]\n*/\nconst AnalysePage = () =>{ \n    //const {state} = props\n    \n    //const sampleData = WordCounter(this.state.transcript);\n\n    return(\n            <div>\n\t\t\t\t\t<Grid container\n\t\t\t\t\t\tspacing={24}\n\t\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\tjustify=\"flex-end\"\n\t\t\t\t\t>\n                    <h1>Analytics</h1>\n                        <Grid item xs={12}>\n                            <VictoryPie\n                                innerRadius={100}\n                                colorScale={[\"tomato\", \"orange\", \"gold\", \"red\"]}\n                                //data={sampleData}\n                                //data={WordCounter(state.transcript)}\n                                data = {[{a:1,b:2}]}\n                            />\n                        </Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</div>)\n}\n\nAnalysePage.propTypes = {\n    state: PropTypes.object\n}\n\nexport default AnalysePage","/* WordCounter counts frequensies of occurences of \"word\" -strings in transcript */\n\n//colors from light to dark\nvar colors = ['#08306b','#08519c','#2171b5','#4292c6','#6baed6','#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000']\ncolors = colors.reverse()\nclass WordCounter {\n\n    constructor() {\n        this.wordsAndFreqs = new Map()\n        this.topWords = []\n    }\n\n    GetColor = (wordInformation) => {\n        var word = wordInformation.word\n        var index = GetIndexInTopWords(word, this.topWords)\n\n        if (index === -1) {\n            return 'black'\n        } else {\n            //if first in list has lover frequency than 2, all words are colored black\n            if (this.topWords[index][1] < 3) {\n                return 'black'\n            } else {\n                return colors[index]\n            }\n        }\n    }\n\n    IsInMostUsedList = (word) => {\n        if (GetIndexInTopWords(word, this.topWords) > -1) {\n            return true\n        }\n        return false\n    }\n\n    GetFrequency = (word) => {\n        //in case a word is not found a zero is returned\n        var freq = 0\n        var wordMapForm = RemovePunctToLowerCase(word)\n\n        if (CheckIfInMap(wordMapForm, this.wordsAndFreqs)) {\n            freq = this.wordsAndFreqs.get(wordMapForm)\n        }\n\n        return freq\n    }\n\n    CalculateFrequencies = (transcript) => {\n        var numberOfTopWords = 10\n\n        this.wordsAndFreqs = CountOccurences(transcript)\n        this.topWords = SortMap(this.wordsAndFreqs)\n        this.topWords = LimitToXGreatest(this.topWords, numberOfTopWords)\n\n        function LimitToXGreatest(array, newArrSize) {\n\n            if (newArrSize < array.length) {\n                var newFirstIndex = array.length - newArrSize\n                var lastElements = array.slice(newFirstIndex)\n\n                return lastElements.reverse()\n            } else {\n                return array.reverse()\n            }\n        }\n\n        function CountOccurences(tra) {\n            var map = new Map()\n\n            for (var j = 0; j < tra.length; j++) {\n                var words = tra[j]['words']\n\n                for (var i = 0; i < words.length; i++) {\n                    var st = words[i]['word']\n                    var stNoPunct = RemovePunctuation(st)\n                    st = stNoPunct.toLowerCase()\n                    //if map allready contains a certain key, the value is incremented\n                    if (map.has(st)) {\n                        var freg = map.get(st) + 1\n                        map.set(st, freg)\n                    } else {\n                        map.set(st, 1)\n                    }\n                }\n            }\n            return map\n\n        }\n\n\n        //Returns an array of key value pairs\n        function SortMap(map) {\n            var iterator = map.keys()\n            var entries = []\n            var i\n\n            for (i = 0; i < map.size; i++) {\n                var key = iterator.next().value\n                entries[i] = [key, map.get(key)]\n            }\n\n            function compare(a, b) {\n                return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0\n            }\n\n            return entries.sort(compare)\n        }\n    }\n\n}\n\nconst RemovePunctuation = (string) => {\n    return string.replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \" \")\n}\n\nconst RemovePunctToLowerCase = (string) => {\n    return RemovePunctuation(string).toLowerCase()\n}\n\nconst CheckIfInMap = (string, map) => {\n    var stringNoPunctLoCase = RemovePunctToLowerCase(string)\n\n    if (map.has(stringNoPunctLoCase)) {\n        return true\n    }\n    return false\n}\n\nconst GetIndexInTopWords = (string, array) => {\n    //returns integer telling strings index in top words, if not found returns -1\n    var stringListForm = RemovePunctToLowerCase(string)\n\n    if (array === undefined || array.length === 0) {\n        return -1\n    }\n\n    for (var i = 0; i < array.length; i++) {\n        if (stringListForm === array[i][0]) {\n            return i\n        }\n    }\n\n    return -1\n}\n\nexport default WordCounter\n","import React, { Component } from 'react'\nimport { Hidden } from '@material-ui/core'\nimport MiniDrawer from \"./common/MiniDrawer\"\nimport MobileDrawer from \"./common/MobileDrawer\"\n\n//import views\nimport HomePage from \"./views/homepage/HomePage\"\nimport AnalysePage from \"./views/analysepage/AnalysePage\"\n\nimport openSocket from 'socket.io-client'\nimport PropTypes from 'prop-types'\n\nimport { estimateStartTime } from './utils/GeneralUtils'\n\nimport WordColor from './utils/WordColor.js'\nimport { DownsampleBuffer } from './utils/DownsampleBuffer.js'\n\n\nlet AudioContext\nlet context\nlet processor\nlet input\nlet globalStream\nlet analyser\nlet recorder\n\nconst initialState = {\n\tisRecording: false,\n\telapsed: 0,\n\ttranscript: [],\n\tvolumes: [],\n\tinterim: \"\",\n\taudioChunks: [],\n\tblobUrl: \"\",\n\tleft: false,\n\tview: 0,\n\twordColor: new WordColor(),\n\thighlight: 0\n}\n\nclass SpeechDismantler extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tlet { server_address } = props\n\t\tthis.bufferSize = 2048\n\t\tthis.socket = openSocket(server_address)\n\t\tthis.state = initialState\n\n\t\tthis.socket.on('connect', () => {\n\t\t\tthis.socket.emit('join', 'Server Connected to Client')\n\t\t})\n\n\t\tthis.socket.on('speechData', (data) => {\n\t\t\tconst final = undefined || data.results[0].isFinal\n\t\t\tconst result = data.results[0].alternatives[0].words\n\t\t\tconst transcript = data.results[0].alternatives[0].transcript\n\t\t\tif (final === false) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tinterim: transcript,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tvar newTranscript = this.state.transcript.slice(0)\n\t\t\t\tvar sentence = {\n\t\t\t\t\tstartTime: 0,\n\t\t\t\t\tendTime: this.state.elapsed,\n\t\t\t\t\twords: result\n\t\t\t\t}\n\t\t\t\tconst startTime = estimateStartTime(sentence, 1000)\n\t\t\t\tsentence.startTime = startTime\n\n\t\t\t\tnewTranscript.push(sentence)\n\t\t\t\tthis.setState({\n\t\t\t\t\ttranscript: newTranscript,\n\t\t\t\t})\n\t\t\t\tthis.state.wordColor.CalculateFrequencies(newTranscript)\n\t\t\t}\n\t\t})\n\n\t\twindow.onbeforeunload = () => {\n\t\t\tif (this.state.isRecording) { this.socket.emit('endGoogleCloudStream', '') }\n\t\t}\n\t}\n\n\t/**\n\t * Updates the elapsed time using AudioContext.currentTime\n\t * @this {SpeechDismantler}\n\t * @author Aleksi Suoranta\n\t */\n\ttick = () => {\n\t\tconst newElapsed = context.currentTime * 1000\n\t\tthis.setState({ elapsed: newElapsed })\n\t}\n\n\t/**\n\t * Resets the state information of the application\n\t * @this {SpeechDismantler}\n\t * @author Aleksi Suoranta\n\t */\n\treset = () => {\n\t\tthis.stopRecording()\n\t\tthis.setState(initialState, clearInterval(this.timer))\n\t\tthis.setState({ wordColor: new WordColor() })\n\t}\n\n\tsetView = (id) => {\n\t\tthis.setState({ view: id })\n\t}\n\n\tsetHighLight = (id) => {\n\t\tif (id === this.state.highlight) {\n\t\t\tthis.state.wordColor.ResetColor()\n\t\t\tthis.setState({ highlight: 0 })\n\t\t} else if (id === 1) {\n\t\t\tthis.state.wordColor.ColorUsingFillerWords()\n\t\t\tthis.setState({ highlight: 1 })\n\t\t} else if (id === 2) {\n\t\t\tthis.state.wordColor.ColorUsingWordFrequencies()\n\t\t\tthis.setState({ highlight: 2 })\n\t\t} else if (id === 3) {\n\t\t\tthis.state.wordColor.ColorUsingVolumeLevel()\n\t\t\tthis.setState({ highlight: 3 })\n\t\t}\n\t}\n\n\t/**\n\t * Handles record toggling for the app\n\t * @this {SpeechDismantler}\n\t * @author Aleksi Suoranta\n\t */\n\ttoggleRecord = () => {\n\t\tconst newIsRecording = !this.state.isRecording // state might not be updated if it is read after setState\n\t\tthis.setState({\n\t\t\tisRecording: newIsRecording,\n\t\t},\n\t\t\tnewIsRecording\n\t\t\t\t? () => {\n\t\t\t\t\t//this.start = new Date()\n\t\t\t\t\tthis.timer = setInterval(this.tick, 10)\n\t\t\t\t\tif (context == null) {\n\t\t\t\t\t\treturn this.handleListen()\n\t\t\t\t\t} else {\n\t\t\t\t\t\trecorder.resume()\n\t\t\t\t\t\treturn context.resume()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t: () => {\n\t\t\t\t\tclearInterval(this.timer)\n\t\t\t\t\trecorder.pause()\n\t\t\t\t\treturn context.suspend()\n\t\t\t\t})\n\n\t}\n\n\t/**\n\t * Event handler for audio data, streams data through socket to the server\n\t * @this {SpeechDismantler}\n\t */\n\tstreamAudioData = (e) => {\n\t\tconst left = e.inputBuffer.getChannelData(0)\n\t\tconst left16 = DownsampleBuffer(left, 44100, 16000)\n\t\tthis.socket.emit('binaryData', left16)\n\t}\n\n\t/**\n\t * Initializes webaudio components for recording\n\t * @this {SpeechDismantler}\n\t * @author Aleksi Suoranta\n\t */\n\thandleListen = () => {\n\t\tthis.socket.emit('startGoogleCloudStream', '') // init socket Google Speech Connection\n\t\tAudioContext = window.AudioContext || window.webkitAudioContext\n\t\tcontext = new AudioContext()\n\t\tcontext.suspend() //Stops the context timer here\n\t\tprocessor = context.createScriptProcessor(this.bufferSize, 1, 1)\n\n\t\tconst handleSuccess = (stream) => {\n\t\t\tglobalStream = stream\n\t\t\trecorder = new MediaRecorder(stream)\n\t\t\tinput = context.createMediaStreamSource(stream)\n\t\t\tinput.connect(processor)\n\t\t\tanalyser = context.createAnalyser()\n\t\t\t//javascriptNode=audioContext.createScriptProcessor(2048,1,1);\n\t\t\tanalyser.smoothingTimeConstant = 0.8\n\t\t\tanalyser.fftSize = 1024\n\t\t\tinput.connect(analyser)\n\t\t\tanalyser.connect(processor)\n\t\t\tprocessor.connect(context.destination)\n\n\t\t\trecorder.ondataavailable = (e) => {\n\t\t\t\tvar newChunks = this.state.audioChunks.slice()\n\t\t\t\tnewChunks.push(e.data)\n\t\t\t\tthis.setState({\n\t\t\t\t\taudioChunks: newChunks\n\t\t\t\t})\n\t\t\t\tconst audioBlob = new Blob(newChunks)\n\t\t\t\tconst audioUrl = URL.createObjectURL(audioBlob)\n\t\t\t\tthis.setState({\n\t\t\t\t\tblobUrl: audioUrl\n\t\t\t\t})\n\t\t\t}\n\t\t\trecorder.onpause = () => {\n\t\t\t\trecorder.requestData()\n\n\t\t\t}\n\t\t\tprocessor.onaudioprocess = (e) => {\n\t\t\t\tthis.streamAudioData(e)\n\t\t\t\tvar array = new Uint8Array(analyser.frequencyBinCount)\n\t\t\t\tanalyser.getByteFrequencyData(array)\n\t\t\t\tvar values = 0\n\t\t\t\tvar length = array.length\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tvalues += (array[i])\n\t\t\t\t}\n\t\t\t\tvar average = Math.round(values / length)\n\t\t\t\tvar newVolumes = this.state.volumes.slice()\n\t\t\t\tvar volumesObject = { time: this.state.elapsed, volume: average }\n\n\t\t\t\tthis.state.wordColor.SetVolumes(volumesObject)\n\n\t\t\t\tnewVolumes.push(volumesObject)\n\t\t\t\t//console.log(this.state.volumes)\n\t\t\t\tthis.setState({\n\t\t\t\t\tvolumes: newVolumes,\n\t\t\t\t})\n\t\t\t}\n\t\t\t//Recording and context timer are almost synced with this\n\t\t\trecorder.start()\n\t\t\tcontext.resume()\n\t\t}\n\n\t\tnavigator.mediaDevices.getUserMedia({ audio: true })\n\t\t\t.then(handleSuccess)\n\t}\n\n\t/**\n\t * Resets the web audio components\n\t * @this {SpeechDismantler}\n\t * @author Aleksi Suoranta\n\t */\n\tstopRecording = () => {\n\t\tthis.socket.emit('endGoogleCloudStream', '')\n\t\t//var tracks = null\n\t\tif (globalStream) {\n\t\t\tvar tracks = globalStream.getTracks()\n\t\t\tfor (var i = 0; i < tracks.length; i++) {\n\t\t\t\ttracks[i].stop()\n\t\t\t}\n\t\t}\n\t\tif (recorder) {\n\t\t\trecorder.stop()\n\t\t}\n\t\tif (input) {\n\t\t\tinput.disconnect(processor)\n\t\t}\n\t\tif (processor) {\n\t\t\tprocessor.disconnect(context.destination)\n\t\t}\n\t\tif (context) {\n\t\t\tcontext.close().then(() => {\n\t\t\t\tinput = null\n\t\t\t\tprocessor = null\n\t\t\t\tcontext = null\n\t\t\t\tAudioContext = null\n\t\t\t\trecorder = null\n\t\t\t})\n\t\t}\n\n\t}\n\n\t/**\n\t * Reacts render, this is the root render for the app\n\t * @this {SpeechDismantler}\n\t */\n\trender() {\n\n\t\tconst pageView = this.state.view\n\t\tlet page\n\n\t\tif (pageView === 0) {\n\t\t\tpage = <HomePage state={this.state} toggleRecord={this.toggleRecord} reset={this.reset} setHighLight={this.setHighLight} />\n\t\t} else {\n\t\t\tpage = <AnalysePage state={this.state} />\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<Hidden smDown>\n\t\t\t\t\t\t<MiniDrawer setView={this.setView} />\n\t\t\t\t\t</Hidden>\n\t\t\t\t\t<Hidden mdUp>\n\t\t\t\t\t\t<MobileDrawer setView={this.setView} />\n\t\t\t\t\t</Hidden>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{page}\n\t\t\t\t</div>\n\t\t\t</div >\n\t\t)\n\t}\n}\n\nSpeechDismantler.propTypes = {\n\tserver_address: PropTypes.string\n}\n\nexport default SpeechDismantler\n","class AudioUtils {\n\n    constructor() {\n        this.averageVolumes = []\n        this.wordTimesAndVolumes = new Map()\n\n        this.startTime = 0\n        this.startTimeNotSet = true\n        this.startVolume = 0\n        this.volumeCounter = 0\n\n        this.audioSampleSize = 10 // how many audio samples to average for each recorded time\n    }\n\n    GetColor = (wordWithSentenceStartTime) => {\n        var sentenceStartTimeMs = (+wordWithSentenceStartTime.sentenceStartTime)\n\n        var startTimeMs = (+wordWithSentenceStartTime.startTime.seconds * 1000) + +sentenceStartTimeMs\n        var endTimeMs = (+wordWithSentenceStartTime.endTime.seconds * 1000) + +sentenceStartTimeMs\n        var wordTime = (startTimeMs + endTimeMs) / 2\n\n        //if matching time is not found, find best time match from \"averageVolumes\" and add corresponding\n        //value to map, wordTime as key\n        if (!this.wordTimesAndVolumes.has(wordTime)) {\n            var bestVolumeMatch = GetBestMatchingVolume(wordTime, this.averageVolumes)\n            this.wordTimesAndVolumes.set(wordTime, bestVolumeMatch)\n        }\n        //console.log('time: ' + wordTime + '  volume: ' + this.wordTimesAndVolumes.get(wordTime))\n        return convertVolumeToColor(this.wordTimesAndVolumes.get(wordTime))\n    }\n\n    SetVolumes = (newVolume) => {\n        var timeAndVolume = []\n        this.startVolume = this.startVolume + +newVolume.volume\n        this.volumeCounter = +this.volumeCounter + 1\n        if (this.startTimeNotSet) {\n            this.startTime = newVolume.time\n            this.startTimeNotSet = false\n        }\n\n        if (this.volumeCounter === this.audioSampleSize) {\n\n            timeAndVolume[0] = ((this.startTime + +newVolume.time) / 2)\n            timeAndVolume[1] = (+this.startVolume / this.audioSampleSize)\n\n            this.averageVolumes.push(timeAndVolume)\n            //console.log('av time: ' +timeAndVolume[0]+'  av volume: '+timeAndVolume[1])\n\n            this.startVolume = 0\n            this.volumeCounter = 0\n            this.startTime = 0\n\n            this.startTimeNotSet = true\n        }\n    }\n}\n\nconst convertVolumeToColor = (volume) => {\n    if (volume < 25) {\n        return 'blue'\n    } else if (volume > 24) {\n        return 'green'\n    } else {\n        return 'black'\n    }\n}\n\nconst GetBestMatchingVolume = (number, arr) => {\n    var startIndex = 0\n    var array = []\n    array = arr\n    var endIndex = array.length - 1\n\n    var closestMatch = findInSubArray(number, startIndex, endIndex)\n\n    function findInSubArray(number, startIndex, endIndex) {\n        var middleIndex = parseInt((startIndex + endIndex) / 2, 10)\n\n        if (endIndex - startIndex < 4 || middleIndex + 1 === endIndex) {\n            return array[middleIndex][1]\n        }\n\n        if (number <= array[middleIndex][0]) {\n            return findInSubArray(number, startIndex, middleIndex)\n        } else {\n            return findInSubArray(number, middleIndex + 1, endIndex)\n        }\n    }\n    return closestMatch\n}\n\nexport default AudioUtils","\nimport fillerWordsJson from './../config/fillerWords.json'\n\n//colors from light to dark\n//const colors = ['#42e20d', '#5be22f', '#61e038', '#68e041', '#71e04c', '#78e055', '#80e060', '#8ce070', '#98e27f', '#9ddd87']\n\nclass FillerWords {\n\n    constructor() {\n        this.fillerWords = new Map()\n\n        const fillers = fillerWordsJson.fillerWords\n        for (var i = 0; i < fillers.length; i++) {\n            this.fillerWords.set(fillers[i].fillerWord, 1)\n        }\n    }\n\n    GetColor = (wordInformation) => {\n        var word = RemovePunctToLowerCase(wordInformation.word)\n\n        if (this.fillerWords.has(word)) {\n            return 'red'\n        } else {\n            return 'black'\n        }\n\n    }\n}\n\nconst RemovePunctToLowerCase = (string) => {\n    return RemovePunctuation(string).toLowerCase()\n}\n\nconst RemovePunctuation = (string) => {\n    return string.replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \" \")\n}\n\nexport default FillerWords\n","\nimport WordCounter from './WordFregs.js'\nimport AudioUtils from './AudioUtils.js'\nimport FillerWords from './FillerWords.js'\n\nclass WordColor {\n\n    constructor() {\n        this.WordCounter = new WordCounter()\n        this.AudioUtils = new AudioUtils()\n        this.FillerWords = new FillerWords()\n\n        this.useFillerWords = false\n        this.useWordFrequencies = false\n        this.useVolumeLevel = false\n    }\n\n    CalculateFrequencies = (transcript) => {\n        this.WordCounter.CalculateFrequencies(transcript)\n    }\n\n    GetColor = (word) => {\n        if (this.useFillerWords) {\n            return this.FillerWords.GetColor(word)\n        } else if (this.useVolumeLevel){\n            return this.AudioUtils.GetColor(word)\n        } else if (this.useWordFrequencies) {\n            return this.WordCounter.GetColor(word)\n        } else {\n            return 'black'\n        }\n    }\n\n    ColorUsingFillerWords = () => {\n        this.useFillerWords = true\n        this.useWordFrequencies = false\n        this.useVolumeLevel = false\n    }\n\n    ColorUsingWordFrequencies = () => {\n        this.useFillerWords = false\n        this.useWordFrequencies = true\n        this.useVolumeLevel = false\n    }\n\n    ColorUsingVolumeLevel = () => {\n        this.useFillerWords = false\n        this.useWordFrequencies = false\n        this.useVolumeLevel = true\n\n    }\n\n    ResetColor = () => {\n        this.useFillerWords = false\n        this.useWordFrequencies = false\n        this.useVolumeLevel = false\n    }\n\n    SetVolumes = (newVolumes) => {\n        this.AudioUtils.SetVolumes(newVolumes)\n    }\n}\n\nexport default WordColor","\nexport const DownsampleBuffer = (buffer, sampleRate, outSampleRate) => {\n\n    if (outSampleRate === sampleRate) {\n        return buffer\n    }\n\n    /*\n     if (outSampleRate > sampleRate) {\n        throw 'downsampling rate show be smaller than original sample rate'\n    }\n    */\n\n    const sampleRateRatio = sampleRate / outSampleRate\n    const newLength = Math.round(buffer.length / sampleRateRatio)\n    const result = new Int16Array(newLength)\n    let offsetResult = 0\n    let offsetBuffer = 0\n    while (offsetResult < result.length) {\n        const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio)\n        let accum = 0; let\n            count = 0\n        for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i]\n            count++\n        }\n\n        result[offsetResult] = Math.min(1, accum / count) * 0x7FFF\n        offsetResult++\n        offsetBuffer = nextOffsetBuffer\n    }\n\n    return result.buffer\n}","/* eslint-disable */\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport SpeechDismantler from './SpeechDismantler'\n\nvar server_address = \"https://speech-dismantler.herokuapp.com/\" \nif (location.hostname === \"localhost\" || location.hostname === \"127.0.0.1\")\n    server_address = \"http://localhost:3001\" \nReactDOM.render(<SpeechDismantler server_address={server_address}/>, document.getElementById('root'))"],"sourceRoot":""}